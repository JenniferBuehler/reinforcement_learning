.TH "rl::GridWorldTransition" 3 "Wed Oct 28 2015" "LearningAlgorithms" \" -*- nroff -*-
.ad l
.nh
.SH NAME
rl::GridWorldTransition \- Simple transition function which is known a priori for the grid world and does not have to be learned\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <GridWorld\&.h>\fP
.PP
Inherits \fBrl::Transition< GridWorldState, MoveAction >\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef \fBGridWorldState\fP \fBStateT\fP"
.br
.ti -1c
.RI "typedef \fBTransition\fP< \fBGridWorldState\fP, \fBMoveAction\fP > \fBParentT\fP"
.br
.ti -1c
.RI "typedef \fBGridWorldState\fP \fBState\fP"
.br
.ti -1c
.RI "typedef \fBMoveAction\fP \fBAction\fP"
.br
.ti -1c
.RI "typedef \fBParentT::StateTransitionT\fP \fBStateTransitionT\fP"
.br
.ti -1c
.RI "typedef \fBParentT::StateTransitionListT\fP \fBStateTransitionListT\fP"
.br
.ti -1c
.RI "typedef \fBParentT::StateActionStateValueT\fP \fBStateActionStateValueT\fP"
.br
.ti -1c
.RI "typedef \fBTransitionT::StateTransitionListPtrT\fP \fBStateTransitionListPtrT\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBGridWorldTransition\fP (unsigned int _maxX, unsigned int _maxY, unsigned int _goalX, unsigned int _goalY, unsigned int _blockX, unsigned int _blockY, unsigned int _pitX, unsigned int _pitY, float _sideActionProbability)"
.br
.ti -1c
.RI "\fBGridWorldTransition\fP (const \fBGridWorldTransition\fP &o)"
.br
.ti -1c
.RI "virtual \fB~GridWorldTransition\fP ()"
.br
.ti -1c
.RI "virtual bool \fBgetTransitionStates\fP (const \fBState\fP &s, const \fBAction\fP &a, \fBStateTransitionListPtrT\fP &ret) const "
.br
.ti -1c
.RI "virtual void \fBsetTransitionState\fP (const \fBState\fP &s1, const \fBAction\fP &a, const \fBState\fP &s2, \fBStateActionStateValueT\fP p=1)"
.br
.ti -1c
.RI "virtual void \fBprint\fP (std::ostream &o) const "
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "bool \fBactionPossible\fP (const \fBMoveAction::MovesT\fP &a, const \fBState\fP &s) const "
.br
.in -1c
.SH "Detailed Description"
.PP 
Simple transition function which is known a priori for the grid world and does not have to be learned\&. 

It would also be possible to use \fBTransitionStlMap\fP and pre-fill it with all known transitions, but this would be overshoot for this simple problem\&.
.PP
\fBAuthor:\fP
.RS 4
Jennifer Buehler 
.RE
.PP
\fBDate:\fP
.RS 4
May 2011 
.RE
.PP

.SH "Member Typedef Documentation"
.PP 
.SS "typedef \fBMoveAction\fP \fBrl::GridWorldTransition::Action\fP"

.SS "typedef \fBTransition\fP<\fBGridWorldState\fP,\fBMoveAction\fP> \fBrl::GridWorldTransition::ParentT\fP"

.SS "typedef \fBGridWorldState\fP \fBrl::GridWorldTransition::State\fP"

.SS "typedef \fBParentT::StateActionStateValueT\fP \fBrl::GridWorldTransition::StateActionStateValueT\fP"

.SS "typedef \fBGridWorldState\fP \fBrl::GridWorldTransition::StateT\fP"

.SS "typedef \fBTransitionT::StateTransitionListPtrT\fP \fBrl::GridWorldTransition::StateTransitionListPtrT\fP"

.SS "typedef \fBParentT::StateTransitionListT\fP \fBrl::GridWorldTransition::StateTransitionListT\fP"

.SS "typedef \fBParentT::StateTransitionT\fP \fBrl::GridWorldTransition::StateTransitionT\fP"

.SH "Constructor & Destructor Documentation"
.PP 
.SS "rl::GridWorldTransition::GridWorldTransition (unsigned int _maxX, unsigned int _maxY, unsigned int _goalX, unsigned int _goalY, unsigned int _blockX, unsigned int _blockY, unsigned int _pitX, unsigned int _pitY, float _sideActionProbability)\fC [inline]\fP"

.PP
\fBParameters:\fP
.RS 4
\fI_maxX\fP and _maxY: dimensions of the grid world 
.br
\fI_goalX\fP and _goalY: coordinates of goal (index starts with 0 and can be maximum _maxX! and _maxY-1 respectively) 
.br
\fI_blockX\fP and _blockY: coordinates of block/wall (index starts with 0 and can be maximum _maxX! and _maxY-1 respectively) 
.br
\fI_sideActionProbability\fP probability that action to be perform fails [0\&.\&.1]\&. With this probability, other available side actions are executed, if they are possible\&. If no side action is possible, the main action is performed with possibility 1\&. Example: if _sideActionProbability=0\&.1, and Action is 'UP', and both 'LEFT' and 'RIGHT' are accessible states, 'UP' is going to be performed with probability 0\&.8, and 'LEFT' and 'RIGHT' with probabilities 0\&.1 repsectively\&. 
.RE
.PP

.SS "rl::GridWorldTransition::GridWorldTransition (const \fBGridWorldTransition\fP & o)\fC [inline]\fP"

.SS "virtual rl::GridWorldTransition::~GridWorldTransition ()\fC [inline]\fP, \fC [virtual]\fP"

.SH "Member Function Documentation"
.PP 
.SS "bool rl::GridWorldTransition::actionPossible (const \fBMoveAction::MovesT\fP & a, const \fBState\fP & s) const\fC [inline]\fP, \fC [protected]\fP"

.SS "virtual bool rl::GridWorldTransition::getTransitionStates (const \fBState\fP & s, const \fBAction\fP & a, \fBStateTransitionListPtrT\fP & ret) const\fC [inline]\fP, \fC [virtual]\fP"

.PP
\fBReturns:\fP
.RS 4
false if no such transition states exist (remain in same state with this action), and true if parameter ret is initialised with the result set\&. 
.RE
.PP

.PP
Implements \fBrl::Transition< GridWorldState, MoveAction >\fP\&.
.SS "virtual void rl::GridWorldTransition::print (std::ostream & o) const\fC [inline]\fP, \fC [virtual]\fP"
prints the transition map 
.PP
Implements \fBrl::Transition< GridWorldState, MoveAction >\fP\&.
.SS "virtual void rl::GridWorldTransition::setTransitionState (const \fBState\fP & s1, const \fBAction\fP & a, const \fBState\fP & s2, \fBStateActionStateValueT\fP p = \fC1\fP)\fC [inline]\fP, \fC [virtual]\fP"
Adds a transition state, or if this transition (s1,a,s2) does exist, the assigned value p is updated\&. 
.PP
Implements \fBrl::Transition< GridWorldState, MoveAction >\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for LearningAlgorithms from the source code\&.
