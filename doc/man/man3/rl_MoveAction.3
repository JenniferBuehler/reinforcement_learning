.TH "rl::MoveAction" 3 "Wed Oct 28 2015" "LearningAlgorithms" \" -*- nroff -*-
.ad l
.nh
.SH NAME
rl::MoveAction \- Action to move in the grid world\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <GridWorld\&.h>\fP
.PP
Inherits \fBrl::ActionBase\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBMoves\fP { \fBRight\fP, \fBUp\fP, \fBDown\fP, \fBLeft\fP }"
.br
.ti -1c
.RI "typedef enum \fBrl::MoveAction::Moves\fP \fBMovesT\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMoveAction\fP ()"
.br
.ti -1c
.RI "\fBMoveAction\fP (\fBMovesT\fP m)"
.br
.ti -1c
.RI "\fBMoveAction\fP (const \fBMoveAction\fP &o)"
.br
.ti -1c
.RI "virtual \fB~MoveAction\fP ()"
.br
.ti -1c
.RI "\fBMovesT\fP \fBgetMove\fP () const "
.br
.ti -1c
.RI "\fBMoveAction\fP & \fBoperator=\fP (const \fBMoveAction\fP &o)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual bool \fBless\fP (const \fBActionBase\fP &a) const "
.br
.ti -1c
.RI "virtual void \fBprint\fP (std::ostream &o) const "
.br
.ti -1c
.RI "virtual void \fBassign\fP (const \fBActionBase\fP &a)"
.br
.ti -1c
.RI "void \fBassignImpl\fP (const \fBMoveAction\fP &o)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Action to move in the grid world\&. 


.PP
\fBAuthor:\fP
.RS 4
Jennifer Buehler 
.RE
.PP
\fBDate:\fP
.RS 4
May 2011 
.RE
.PP

.SH "Member Typedef Documentation"
.PP 
.SS "typedef enum \fBrl::MoveAction::Moves\fP  \fBrl::MoveAction::MovesT\fP"

.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBrl::MoveAction::Moves\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIRight \fP\fP
.TP
\fB\fIUp \fP\fP
.TP
\fB\fIDown \fP\fP
.TP
\fB\fILeft \fP\fP
.SH "Constructor & Destructor Documentation"
.PP 
.SS "rl::MoveAction::MoveAction ()\fC [inline]\fP"

.SS "rl::MoveAction::MoveAction (\fBMovesT\fP m)\fC [inline]\fP, \fC [explicit]\fP"

.SS "rl::MoveAction::MoveAction (const \fBMoveAction\fP & o)\fC [inline]\fP"

.SS "virtual rl::MoveAction::~MoveAction ()\fC [inline]\fP, \fC [virtual]\fP"

.SH "Member Function Documentation"
.PP 
.SS "virtual void rl::MoveAction::assign (const \fBActionBase\fP & o)\fC [inline]\fP, \fC [protected]\fP, \fC [virtual]\fP"
Assign another object of the same type (to work as a copy constructor)\&. This will need a dynamic_cast in the subclass\&. If it's not of the same type or can't be assigned, an exception could be thrown or a warning printed\&. It is also stronly recommended to implement a = operator for all subclasses, for efficiency reasons when using templates\&. This method is only supplied to enforce consistency\&. It will be called from this base class = operator\&. 
.PP
Implements \fBrl::ActionBase\fP\&.
.SS "void rl::MoveAction::assignImpl (const \fBMoveAction\fP & o)\fC [inline]\fP, \fC [protected]\fP"

.SS "\fBMovesT\fP rl::MoveAction::getMove () const\fC [inline]\fP"

.SS "virtual bool rl::MoveAction::less (const \fBActionBase\fP & a) const\fC [inline]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
Implements \fBrl::ActionBase\fP\&.
.SS "\fBMoveAction\fP& rl::MoveAction::operator= (const \fBMoveAction\fP & o)\fC [inline]\fP"

.SS "virtual void rl::MoveAction::print (std::ostream & o) const\fC [inline]\fP, \fC [protected]\fP, \fC [virtual]\fP"
print description of the state into ostream o, and return o\&. 
.PP
Implements \fBrl::ActionBase\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for LearningAlgorithms from the source code\&.
